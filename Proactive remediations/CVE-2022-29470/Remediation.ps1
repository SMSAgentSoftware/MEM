# Intune Remediation script for CVE-2022-29470 / Intel-SA-00875

$TempLocation = $env:TEMP

# Check what remediation is needed
# Get a list of system drivers from pnputil
# Thanks to https://stackoverflow.com/questions/66580801/pnputil-retrieve-each-driver-and-add-to-array-with-psobject
$PNPDriverList = [System.Collections.Generic.List[PSCustomObject]]::new()
$PNPDrivers = PNPUtil.exe /Enum-Drivers /class "System" | Select-Object -Skip 2 |  Select-String -Pattern 'Published Name:' -Context 0,7
Foreach ($PnpDriver in $PnpDrivers) 
{
    if($PnpDriver.Context.PostContext[4] -like "*Class Version:*")
    {
        $ClassVersion = $PnpDriver.Context.PostContext[4] -replace '.*:\s+'
        $DriverVersion = $PnpDriver.Context.PostContext[5] -replace '.*:\s+'
        $SignerName = $PnpDriver.Context.PostContext[6] -replace '.*:\s+'
    }
    else
    {
        $ClassVersion = "N/A"
        $DriverVersion = $PnpDriver.Context.PostContext[4] -replace '.*:\s+'
        $SignerName = $PnpDriver.Context.PostContext[5] -replace '.*:\s+'
    }
    $PNPDriverList.Add(
        [PSCustomObject]@{
            PublishedName = (($PnpDriver | Select-String -Pattern 'Published Name:' ) -replace '.*:\s+')
            OriginalName = (($PnpDriver.Context.PostContext[0]) -replace '.*:\s+')
            ProviderName = (($PnpDriver.Context.PostContext[1]) -replace '.*:\s+')
            ClassName = (($PnpDriver.Context.PostContext[2]) -replace '.*:\s+')
            ClassGUID = (($PnpDriver.Context.PostContext[3]) -replace '.*:\s+')
            ClassVersion = $ClassVersion
            DriverDate =  $DriverVersion.Split()[0]
            DriverVersion = $DriverVersion.Split()[-1]
            SignerName = $SignerName
        }
    )
}

$dtpfDrivers = $PNPDriverList.Where({$_.OriginalName -in ("dptf_acpi.inf","dptf_cpu.inf")})
if ($dtpfDrivers)
{
    [System.Version]$ReferenceVersion = "8.7.10400.15482"
    $PatchedDrivers = @()
    $VulnerableDrivers = @()
    foreach ($dtpfDriver in $dtpfDrivers)
    {
        If ([System.Version]$dtpfDriver.DriverVersion -ge $ReferenceVersion)
        {
            $PatchedDrivers += $dtpfDriver
        }
        else 
        {
            $VulnerableDrivers += $dtpfDriver
        }
    }
}

# If no patched drivers installed, install them
if ($PatchedDrivers.Count -eq 0)
{
    # Download the drivers
    # Check here in case the driver version / download URL is updated: https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00875.html
    $URL = "https://downloadmirror.intel.com/715476/Dynamic_Tuning_Technology-Win10_Win11-8.7.10801.25109.zip"
    $FileName = $URL.Split('/')[-1]
    $ProgressPreference = 'SilentlyContinue'
    try 
    {
        Invoke-WebRequest -Uri $url -OutFile "$TempLocation\$FileName" -UseBasicParsing
    }
    catch 
    {
        throw $_.Exception.Message
    }

    # Check file was downloaded
    If ([System.IO.File]::Exists("$TempLocation\$FileName"))
    {
        # Check the file hash
        $SHA1Hash = "403BC22BD7F12F01E4C0243EA24E762CD689D41C"
        $FileHash = Get-FileHash -Path "$TempLocation\$FileName" -Algorithm SHA1
        If ($FileHash.Hash -ne $SHA1Hash)
        {
            throw "File hash mismatch" 
        }

        # Expand the file
        $ExpandFolder = $FileName.TrimEnd('.zip')
        try 
        {
        Expand-Archive -Path "$TempLocation\$FileName" -DestinationPath "$TempLocation\$ExpandFolder" -Force -ErrorAction Stop 
        }
        catch 
        {
            throw "Failed to expand archive: $_"
        }

        # Install the new drivers
        $DriverPath = "$TempLocation\$ExpandFolder\drivers\x64"
        $Result = pnputil.exe /add-driver $DriverPath\*.inf /install
        $Result | Out-File -FilePath $TempLocation\IntelDTTDriverInstall.txt -Force -ErrorAction SilentlyContinue

        # Clean up temp files
        Remove-Item "$TempLocation\$FileName" -Force -ErrorAction SilentlyContinue
        Remove-Item "$TempLocation\$ExpandFolder" -Recurse -Force -ErrorAction SilentlyContinue
    }
    else 
    {
        throw "Download file not found"
    }

}

# If vulnerable driver versions present, remove them
if ($VulnerableDrivers.Count -ge 1)
{
    $InfFilesToRemove = $VulnerableDrivers | Select -ExpandProperty PublishedName | Select -Unique
    foreach ($InfFile in $InfFilesToRemove)
    {
        $Result = pnputil.exe /delete-driver $InfFile /force
        $Result | Out-File -FilePath "$TempLocation\$InfFile`_Removal.txt" -Force -ErrorAction SilentlyContinue
    }
}
