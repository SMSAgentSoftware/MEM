# Check if SecureBoot is supported and enabled
$SBEnabled = Confirm-SecureBootUEFI
If ($SBEnabled -ne $true)
{
    "SecureBoot is not supported or enabled"
    Exit 0
}

# Define which OS versions are supported by the MS CVE fix
$CurrentBuildTable = @{
    "22621" = "1992" # W11 22H2, KB5028185
    "22000" = "2176" # W11 21H2, KB5028182
    "19045" = "3208" # W10 22H2, KB5028166
    "19044" = "3208" # W10 21H2, KB5028166
    "17763" = "4645" # W10 1809 LTSC, KB5028168
    "14393" = "6085" # W10 1607 LTSC, KB5028169
    "10240" = "20048" # W10 1507 LTSC, KB5028186
}

# Get OS version
$CurrentBuild = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name "CurrentBuild" -ErrorAction SilentlyContinue | Select -ExpandProperty "CurrentBuild"
$UBR = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name "UBR" -ErrorAction SilentlyContinue | Select -ExpandProperty "UBR"

# If unable to determine build
If ($null -eq $CurrentBuild -or $null -eq $UBR)
{
    throw "Unable to determine OS build"
}

# Check whether current build is at minimum required patch level
switch ($CurrentBuild) {
    22621 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    22000 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    19045 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    19044 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    17763 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    14393 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    10240 { If ($UBR -lt $CurrentBuildTable["$CurrentBuild"]){ "OS version requirement not met"; Exit 0 } }
    Default { "Not supported OS version"; Exit 0 } 
}

# Define reg key parameters
$Path = "HKLM:\SYSTEM\CurrentControlSet\Control\Secureboot\"
$ValueName = "AvailableUpdates"
$Value = 48
$PathExists = Test-Path $Path

# Check if the paths exists
If ($PathExists -eq $false)
{
    "Reg value does not exist"
    Exit 1
}

# Check if the value is correct
$CurrentValue = Get-ItemProperty -Path $Path -Name $ValueName -ErrorAction SilentlyContinue | Select -ExpandProperty $ValueName
If ($CurrentValue -ne $Value)
{
    "Value is not correct or present"
    Exit 1
}